11:27:41: Executing ':StreamBenchmark.main()'...

> Task :compileJava UP-TO-DATE
> Task :processResources NO-SOURCE
> Task :classes UP-TO-DATE

> Task :StreamBenchmark.main()
# JMH version: 1.33
# VM version: JDK 17.0.8, OpenJDK 64-Bit Server VM, 17.0.8+7-LTS
# VM invoker: C:\Users\feder\.jdks\azul-17.0.8\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.example.StreamBenchmark.concurrencia

# Run progress: 0.00% complete, ETA 00:02:40
# Fork: 1 of 1
# Warmup Iteration   1: 8.426 ops/s
# Warmup Iteration   2: 9.483 ops/s
# Warmup Iteration   3: 9.168 ops/s
Iteration   1: 9.218 ops/s
Iteration   2: 9.241 ops/s
Iteration   3: 9.244 ops/s
Iteration   4: 9.240 ops/s
Iteration   5: 9.222 ops/s


Result "org.example.StreamBenchmark.concurrencia":
  9.233 �(99.9%) 0.045 ops/s [Average]
  (min, avg, max) = (9.218, 9.233, 9.244), stdev = 0.012
  CI (99.9%): [9.188, 9.278] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.8, OpenJDK 64-Bit Server VM, 17.0.8+7-LTS
# VM invoker: C:\Users\feder\.jdks\azul-17.0.8\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.example.StreamBenchmark.paralelismo

# Run progress: 50.00% complete, ETA 00:01:21
# Fork: 1 of 1
# Warmup Iteration   1: 11.815 ops/s
# Warmup Iteration   2: 11.996 ops/s
# Warmup Iteration   3: 12.271 ops/s
Iteration   1: 12.318 ops/s
Iteration   2: 12.455 ops/s
Iteration   3: 12.232 ops/s
Iteration   4: 12.467 ops/s
Iteration   5: 12.061 ops/s


Result "org.example.StreamBenchmark.paralelismo":
  12.307 �(99.9%) 0.649 ops/s [Average]
  (min, avg, max) = (12.061, 12.307, 12.467), stdev = 0.169
  CI (99.9%): [11.658, 12.956] (assumes normal distribution)


# Run complete. Total time: 00:02:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt   Score   Error  Units
StreamBenchmark.concurrencia  thrpt    5   9.233 � 0.045  ops/s
StreamBenchmark.paralelismo   thrpt    5  12.307 � 0.649  ops/s

BUILD SUCCESSFUL in 2m 44s
2 actionable tasks: 1 executed, 1 up-to-date
11:30:26: Execution finished ':StreamBenchmark.main()'.